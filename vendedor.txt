//Etapa 0
//
//Sobre el proyecto Wollok (sea el que proponemos aquÃ­ o el que ustedes tengan de su cursada), identificar lo siguiente:
//
//   * el tipo de todos los parÃ¡metros;
//   * para los mÃ©todos que devuelven algo, de quÃ© tipo es lo que devuelve;
//   * para los mÃ©todos que son acciones y no devuelven nada, especificar exactamente eso (con un comentario que diga "no devuelve nada" o similar).
//
//Pueden hacerlo con comentarios sobre el cÃ³digo, en una hoja de papel, un documento de texto, etcÃ©tera - lo importante es que lo piensen antes de mandarse a escribir cÃ³digo Kotlin.
//
//Vale usar como ayuda el Diagrama estÃ¡tico que muestra Wollok, pero ojo ðŸ‘€: no siempre los tipos que allÃ­ figuran son correctos. En caso de duda, gana el criterio de ustedes por sobre lo que muestre el diagrama.


class Certificacion {
	const property esDeProducto  //esDeProducto es tipo booleano
	const property puntaje		//puntaje es de tipo entero
}

class Vendedor {
	const certificaciones = [] //lista de tipo Certificacion

//esVersatil() es del tipo boleano

	method esVersatil() =
		certificaciones.size() >= 3
			&& self.certificacionesDeProducto() >= 1
			&& self.otrasCertificaciones() >= 1
			
//agregarCertificacion(certificacion) no devuelve nada solo recibe parametro del tipo certificacion

	method agregarCertificacion(certificacion) {
		certificaciones.add(certificacion)
	}

//esFirme() es del tipo booleano

	method esFirme() = self.puntajeCertificaciones() >= 30

	method certificacionesDeProducto() = certificaciones.count { c => c.esDeProducto() } //certificacionesDeProducto() devuelve un entero
	method otrasCertificaciones() = certificaciones.count { c => !c.esDeProducto() } //otrasCertificaciones() devuelve un entero

	method puntajeCertificaciones() = certificaciones.sum { c => c.puntaje() } //puntajeCertificaciones() devuelve un entero
}

class VendedorFijo inherits Vendedor {
	const property ciudadOrigen //ciudadOrigen es del tipo string

//	puedeTrabajarEn(ciudad) metodo tipo booleano(true/false)  recibe un parametros del tipo string

	method puedeTrabajarEn(ciudad) {
		return ciudad == ciudadOrigen
	}
}

class Viajante inherits Vendedor {

	const property provinciasHabilitadas //provinciasHabilitadas es del tipo Provincia
	
//	puedeTrabajarEn(ciudad) metodo tipo booleano(true/false)  recibe un parametros del tipo string
	method puedeTrabajarEn(ciudad) {
		return provinciasHabilitadas.contains(ciudad.provincia())
	}
}

class ComercioCorresponsal inherits Vendedor {
	const property ciudades
	
//	puedeTrabajarEn(ciudad) metodo tipo booleano(true/false)  recibe un parametros del tipo string

	method puedeTrabajarEn(ciudad) {
		return ciudades.contains(ciudad)
	}
}
